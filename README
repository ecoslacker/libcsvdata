libcsvdata: a CSV read/write libray.

libcsvdata is a library to read and write comma separated values (CSV) text
files. You can import this library in order to read and write comma delimited
numeric values such as coordinates or climate records.

This is a very simple C++ code that is not intended to be a huge and serious
project, the purpuse of this library is to be an utility for some other
projects. In fact, this is a common library in the irriapps project
(http://www.irriapps.com) and some software from this site uses it. 

If you are willing to use this library in your project, please consider there
might be some bugs. All feedback is welcome.

====== Compilation ======

This project was created in C++ using `cmake`. To compile this project you can
use the following instructions:

1. Clone the project from github.

        $ git clone https://github.com/ecoslacker/libcsvdata.git

2. Create a build directory, it may be called whatever you want. In this
   example it's called `lib`:

        $ mkdir lib && cd lib

3. Run cmake, on Unix-like systems:

        $ cmake .. -G "Unix Makefiles"

  On Windows, Visual Studio `nmake` is recommended instead of `mingw32-make`
  because there might be some errors related to the `gcc` compiler.

        > cmake .. -G "NMake Makefiles"

  On Windows, DLL and LIB files will be created.

4. Compile, on Unix-like systems:

        $ make

  On Windows:

        > nmake

====== Usage ======

This library can be used as any other third party library, so you need to
include the header `csvdata.h` in your code. Then the functions can be used
as follow. To read a CSV file:

        char delimiter = ',';
        std::vector<std::vector<std::string> > input_data;
        CsvData::parseFromFile("path/to/filename.csv", input_data, delimiter);

The delimited data will be places as strings in the `input_data` variable. In
this file, each line is a vector of strings, and all lines are in a single
vector.

To write a CSV file the sintax is similar:

        CsvData::write("path/to/filename.csv", out_data, delimiter);

Where the variable `out_data` is a vector where each line is a vector of
strings and delimiter is a char type.

Example using the library in a Qt project:

You can use the `Add Library` tool to add it as any other third party libary.
This will add a block of code in your `.pro` file, similar to this:

        unix|win32: LIBS += -L$$PWD/path/to/your/lib/build/ -lcsvdata
        INCLUDEPATH += $$/path/to/your/lib/include
        DEPENPATH += $$/path/to/your/lib/include


====== Where to get it ======

You can download a free copy of pre build binaries for x86_64 (64 bit) at:

    http://resources.irriapps.com/libcsvdata/libcsvdata.html

At the moment 32 bit binaries are not available (only 64 bit).

IMPORTANT: Mixing 32 and 64 bit software does not work. If you are going to
compile your own library please be sure to compile both, the library and main
program with 32 bit tools only, or 64 bit tools only.

====== More information ======

For more information about this and other useful software go to:

    http://www.irriapps.com/

====== License ======


libcsvdata
Read and write comma separated values (CSV) text files.

Copyright (C) 2018 Eduardo Jimenez <ecoslacker@irriapps.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
